package JavaBean;

public class StudentOperator {
    private Student student;


    public StudentOperator(Student student){
        this.student = student;
    }

    public void printPass(){
        if(student.getScore()>60)
        {
            System.out.println(student.getName()+"学生成绩及格");
        }
        else{
            System.out.println(student.getName()+"学生成绩不及格");
        }
    }
}

//构造函数和普通方法在Java中有几个主要的区别：
//
//        目的和用途：
//        构造函数的主要目的是初始化新创建的对象。每当使用new关键字创建类的实例时，都会调用其构造函数。
//        普通方法则用于执行类的特定行为或功能，可以根据需要多次调用。
//        名称：
//        构造函数的名称必须与类名完全相同。
//        普通方法可以有任何有效的标识符作为名称，只要它遵循Java的命名规则。
//        返回类型：
//        构造函数没有返回类型，也不写void。
//        普通方法必须有一个返回类型，可以是基本数据类型、对象、void等。
//        调用方式：
//        构造函数在创建对象时由Java虚拟机自动调用，不能显式地直接调用构造函数。
//        普通方法是通过对象调用的，可以使用对象名.方法名()的方式来调用。
//        重载：
//        构造函数和普通方法都可以被重载，即同一个类中可以有多个同名的方法或构造函数，只要它们的参数列表不同即可。
//        访问修饰符：
//        构造函数可以有访问修饰符，但通常不声明为private，因为那样就无法从类外部创建对象了。然而，在某些设计模式（如单例模式）中，构造函数可能会被声明为private。
//        普通方法可以有任何访问修饰符，包括private、protected、public和默认（包内可见）。
//        构造代码块：
//        构造函数与普通方法不同，它还可以包含构造代码块，这些代码块在类的每个构造函数执行之前都会执行。这是初始化代码的一种便捷方式。
//        综上所述，构造函数和普通方法在Java中扮演着不同的角色，具有不同的特性和用途。正确理解和使用它们对于编写健壮、可维护的Java代码至关重要。
